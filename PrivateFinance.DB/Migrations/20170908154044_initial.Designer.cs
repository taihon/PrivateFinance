// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using PrivateFinance.DB;
using PrivateFinance.Entities;
using System;

namespace PrivateFinance.DB.Migrations
{
    [DbContext(typeof(FinanceContext))]
    [Migration("20170908154044_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PrivateFinance.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountType");

                    b.Property<decimal>("Balance");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("PrivateFinance.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DocumentId");

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int>("Type");

                    b.Property<string>("Url")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("PrivateFinance.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("PrivateFinance.Entities.CategoryOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryId");

                    b.Property<int?>("OperationId");

                    b.Property<int?>("PlaceId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OperationId");

                    b.HasIndex("PlaceId");

                    b.ToTable("CategoryOperations");
                });

            modelBuilder.Entity("PrivateFinance.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int?>("PlaceId");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("PrivateFinance.Entities.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<int?>("AuthorId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("DocumentId");

                    b.Property<int?>("FromId");

                    b.Property<int?>("PlaceId");

                    b.Property<decimal>("Sum");

                    b.Property<int?>("ToId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("FromId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("ToId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("PrivateFinance.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("PrivateFinance.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PrivateFinance.Entities.Attachment", b =>
                {
                    b.HasOne("PrivateFinance.Entities.Document", "Document")
                        .WithMany("Attachments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrivateFinance.Entities.CategoryOperation", b =>
                {
                    b.HasOne("PrivateFinance.Entities.Category", "Category")
                        .WithMany("Operations")
                        .HasForeignKey("CategoryId");

                    b.HasOne("PrivateFinance.Entities.Operation", "Operation")
                        .WithMany("Categories")
                        .HasForeignKey("OperationId");

                    b.HasOne("PrivateFinance.Entities.Place")
                        .WithMany("Operations")
                        .HasForeignKey("PlaceId");
                });

            modelBuilder.Entity("PrivateFinance.Entities.Document", b =>
                {
                    b.HasOne("PrivateFinance.Entities.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");
                });

            modelBuilder.Entity("PrivateFinance.Entities.Operation", b =>
                {
                    b.HasOne("PrivateFinance.Entities.Account")
                        .WithMany("Operations")
                        .HasForeignKey("AccountId");

                    b.HasOne("PrivateFinance.Entities.User", "Author")
                        .WithMany("Operations")
                        .HasForeignKey("AuthorId");

                    b.HasOne("PrivateFinance.Entities.Document", "Document")
                        .WithMany("Operations")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrivateFinance.Entities.Account", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("PrivateFinance.Entities.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");

                    b.HasOne("PrivateFinance.Entities.Account", "To")
                        .WithMany()
                        .HasForeignKey("ToId");
                });
#pragma warning restore 612, 618
        }
    }
}
